"""Dashboard page with clean separation of concerns."""

import reflex as rx
import plotly.graph_objects as go
from ..services.patient_service import (
    get_patient_statistics, 
    get_patient_heart_rate_data, 
    get_age_distribution
)
from ..services.database import SessionLocal
from ..services.chart_service import ChartService
from ..components.layouts import page_layout, page_header, stats_grid, charts_grid
from ..components.cards import stat_card
from ..components.charts import heart_rate_chart, age_distribution_chart
from ..pages.auth import AuthState


class DashboardState(rx.State):
    """Clean state class focused only on data and state management."""
    
    # Dashboard statistics
    total_patients: int = 0
    target_percentage: float = 0
    persuasion_success: float = 0
    
    # Raw data from database
    heart_rate_data: list[dict] = []
    age_distribution: list[tuple[str, int]] = []
    
    # Chart data (generated by service)
    heart_rate_chart_data: go.Figure = go.Figure()
    age_distribution_chart_data: go.Figure = go.Figure()
    
    def load_dashboard_data(self):
        """Load dashboard data from database and generate charts."""
        db = SessionLocal()
        try:
            # Load statistics
            stats = get_patient_statistics(db)
            self.total_patients = stats["total_patients"]
            self.target_percentage = stats["target_percentage"]
            self.persuasion_success = stats["persuasion_success"]
            
            # Load raw data
            self.heart_rate_data = get_patient_heart_rate_data(db)
            age_dist_dict = get_age_distribution(db)
            self.age_distribution = list(age_dist_dict.items())
            
            # Generate chart data using service
            self.heart_rate_chart_data = ChartService.generate_heart_rate_chart(self.heart_rate_data)
            self.age_distribution_chart_data = ChartService.generate_age_distribution_chart(self.age_distribution)
            
        finally:
            db.close()


def dashboard_page() -> rx.Component:
    """Clean dashboard page using modular components."""
    # Simple auth check - show login prompt if not authenticated
    return rx.cond(
        AuthState.is_authenticated,
        # Authenticated content
        rx.box(
            page_layout(
                rx.vstack(
                    # Header
                    page_header("Dashboard"),
                    
                    # Statistics cards - matching exact design
                    stats_grid([
                        stat_card(
                            "Total No. of Patients",
                            DashboardState.total_patients.to_string(),
                            "users",
                            "#3B82F6"  # Blue
                        ),
                        stat_card(
                            "Total % of patients achieved targets", 
                            DashboardState.target_percentage.to_string() + "%",
                            "trending-up",
                            "#10B981"  # Green
                        ),
                        stat_card(
                            "Total % of Persuasion Success by Chatbot",
                            DashboardState.persuasion_success.to_string() + "%",
                            "trending-down",  # Changed to trending-down to match image
                            "#EF4444"  # Red for declining metric
                        ),
                    ]),
                    
                    # Charts section
                    charts_grid([
                        heart_rate_chart(DashboardState.heart_rate_chart_data),
                        age_distribution_chart(DashboardState.age_distribution_chart_data),
                    ]),
                    
                    spacing="6",
                    width="100%",
                ),
                "dashboard"
            ),
            on_mount=DashboardState.load_dashboard_data,
        ),
        # Not authenticated - show login prompt
        rx.container(
            rx.vstack(
                rx.heading("Access Denied", size="8", color="#EF4444"),
                rx.text("Please login to access the dashboard.", size="4", color="#6B7280"),
                rx.button(
                    "Go to Login",
                    on_click=lambda: rx.redirect("/"),
                    bg="#181C62",
                    color="white",
                    size="3",
                ),
                spacing="4",
                align="center",
            ),
            padding="8",
            max_width="400px",
            margin="0 auto",
            min_height="100vh",
            display="flex",
            align_items="center",
            justify_content="center",
        )
    ) 